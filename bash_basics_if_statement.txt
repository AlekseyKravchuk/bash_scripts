############################## Basic If Statements ##############################
if [ <some test> ]
then
<commands>
fi

The square brackets ( [ ] ) in the if statement above are actually a reference to the command test.
This means that all of the operators that test allows may be used here as well.

Operator        	Description
! EXPRESSION    	The EXPRESSION is false.
-n STRING 	        The length of STRING is greater than zero.
-z STRING 	        The lengh of STRING is zero (ie it is empty).
STRING1 = STRING2 	STRING1 is equal to STRING2
STRING1 != STRING2 	STRING1 is not equal to STRING2
INTEGER1 -eq INTEGER2 	INTEGER1 is numerically equal to INTEGER2
INTEGER1 -gt INTEGER2 	INTEGER1 is numerically greater than INTEGER2
INTEGER1 -lt INTEGER2 	INTEGER1 is numerically less than INTEGER2
-d FILE 	        FILE exists and is a directory.
-e FILE 	        FILE exists.
-r FILE 	        FILE exists and the read permission is granted.
-s FILE 	        FILE exists and it's size is greater than zero (ie. it is not empty).
-w FILE 	        FILE exists and the write permission is granted.
-x FILE 	        FILE exists and the execute permission is granted.


VAR=$VAR1 is a simplified version of VAR=${VAR1}.

Using quotes around a variable as in rm -- "$VAR1" or rm -- "${VAR}" is a good idea.
This makes the contents of the variable an atomic unit.
If the variable value contains blanks (well, characters in the $IFS special variable, blanks by default) or globbing characters and you don't quote it,
then each word is considered for filename generation (globbing) whose expansion makes as many arguments to whatever you're doing.
